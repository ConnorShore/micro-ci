// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: pkg/rpc/micro-ci.proto

package micro_ci

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MicroCI_Register_FullMethodName        = "/micro_ci.MicroCI/Register"
	MicroCI_Unregister_FullMethodName      = "/micro_ci.MicroCI/Unregister"
	MicroCI_FetchJob_FullMethodName        = "/micro_ci.MicroCI/FetchJob"
	MicroCI_UpdateJobStatus_FullMethodName = "/micro_ci.MicroCI/UpdateJobStatus"
)

// MicroCIClient is the client API for MicroCI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type MicroCIClient interface {
	// Register a new runner with the CI server
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Unregister a runner from the CI server
	Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterResponse, error)
	// Fetch a job for the registered runner to execute
	FetchJob(ctx context.Context, in *FetchJobRequest, opts ...grpc.CallOption) (*FetchJobResponse, error)
	// Update the status of a job
	UpdateJobStatus(ctx context.Context, in *UpdateJobStatusRequest, opts ...grpc.CallOption) (*UpdateJobStatusResponse, error)
}

type microCIClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroCIClient(cc grpc.ClientConnInterface) MicroCIClient {
	return &microCIClient{cc}
}

func (c *microCIClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, MicroCI_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microCIClient) Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterResponse)
	err := c.cc.Invoke(ctx, MicroCI_Unregister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microCIClient) FetchJob(ctx context.Context, in *FetchJobRequest, opts ...grpc.CallOption) (*FetchJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchJobResponse)
	err := c.cc.Invoke(ctx, MicroCI_FetchJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microCIClient) UpdateJobStatus(ctx context.Context, in *UpdateJobStatusRequest, opts ...grpc.CallOption) (*UpdateJobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateJobStatusResponse)
	err := c.cc.Invoke(ctx, MicroCI_UpdateJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroCIServer is the server API for MicroCI service.
// All implementations must embed UnimplementedMicroCIServer
// for forward compatibility.
//
// Service definition
type MicroCIServer interface {
	// Register a new runner with the CI server
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Unregister a runner from the CI server
	Unregister(context.Context, *UnregisterRequest) (*UnregisterResponse, error)
	// Fetch a job for the registered runner to execute
	FetchJob(context.Context, *FetchJobRequest) (*FetchJobResponse, error)
	// Update the status of a job
	UpdateJobStatus(context.Context, *UpdateJobStatusRequest) (*UpdateJobStatusResponse, error)
	mustEmbedUnimplementedMicroCIServer()
}

// UnimplementedMicroCIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMicroCIServer struct{}

func (UnimplementedMicroCIServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMicroCIServer) Unregister(context.Context, *UnregisterRequest) (*UnregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedMicroCIServer) FetchJob(context.Context, *FetchJobRequest) (*FetchJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchJob not implemented")
}
func (UnimplementedMicroCIServer) UpdateJobStatus(context.Context, *UpdateJobStatusRequest) (*UpdateJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobStatus not implemented")
}
func (UnimplementedMicroCIServer) mustEmbedUnimplementedMicroCIServer() {}
func (UnimplementedMicroCIServer) testEmbeddedByValue()                 {}

// UnsafeMicroCIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroCIServer will
// result in compilation errors.
type UnsafeMicroCIServer interface {
	mustEmbedUnimplementedMicroCIServer()
}

func RegisterMicroCIServer(s grpc.ServiceRegistrar, srv MicroCIServer) {
	// If the following call pancis, it indicates UnimplementedMicroCIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MicroCI_ServiceDesc, srv)
}

func _MicroCI_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroCIServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroCI_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroCIServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroCI_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroCIServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroCI_Unregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroCIServer).Unregister(ctx, req.(*UnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroCI_FetchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroCIServer).FetchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroCI_FetchJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroCIServer).FetchJob(ctx, req.(*FetchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroCI_UpdateJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroCIServer).UpdateJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicroCI_UpdateJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroCIServer).UpdateJobStatus(ctx, req.(*UpdateJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MicroCI_ServiceDesc is the grpc.ServiceDesc for MicroCI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroCI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "micro_ci.MicroCI",
	HandlerType: (*MicroCIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _MicroCI_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _MicroCI_Unregister_Handler,
		},
		{
			MethodName: "FetchJob",
			Handler:    _MicroCI_FetchJob_Handler,
		},
		{
			MethodName: "UpdateJobStatus",
			Handler:    _MicroCI_UpdateJobStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/rpc/micro-ci.proto",
}
